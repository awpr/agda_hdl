module Categories.Syntax.Cartesian.Core where

-- The core module of datatypes and definitions for cartesian category
-- syntax over a polyquiver.  This module is not parameterized over
-- the PolyQuiver, so each datatype can be individually parameterized
-- over only the parts it needs.

open import Data.List as List using (List; [_]; _‚à∑_; []; _++_)
open import Data.Product using (_√ó_; _,_)
open import Level using (Level)
import Function
open import Level using (_‚äî_)
open import Relation.Binary.PropositionalEquality as ‚â° using
  ( _‚â°_; refl
  ; cong; cong‚ÇÇ; trans; sym
  )

private
  variable
    o m : Level
    Type : Set o
    Mor : List Type ‚Üí List Type ‚Üí Set m

infixr 30 _‚äó_

data Object (Type : Set o) : Set o where
  prim : Type ‚Üí Object Type
  ùüè : Object Type
  _‚äó_ : (A B : Object Type) ‚Üí Object Type

toList : Object Type ‚Üí List Type
toList (prim A) = [ A ]
toList ùüè = []
toList (A ‚äó B) = toList A ++ toList B

toObj‚ÇÅ : Type ‚Üí List Type ‚Üí Object Type
toObj‚ÇÅ x‚ÇÅ [] = prim x‚ÇÅ
toObj‚ÇÅ x‚ÇÅ (x‚ÇÇ ‚à∑ xs) = prim x‚ÇÅ ‚äó toObj‚ÇÅ x‚ÇÇ xs

toObj : List Type ‚Üí Object Type
toObj [] = ùüè
toObj (x ‚à∑ xs) = toObj‚ÇÅ x xs

toList-toObj‚ÇÅ : ‚àÄ (A‚ÇÅ : Type) As ‚Üí toList (toObj‚ÇÅ A‚ÇÅ As) ‚â° A‚ÇÅ ‚à∑ As
toList-toObj‚ÇÅ A‚ÇÅ [] = refl
toList-toObj‚ÇÅ A‚ÇÅ (A‚ÇÇ ‚à∑ As) = cong (A‚ÇÅ ‚à∑_) (toList-toObj‚ÇÅ _ _)

toList-toObj : ‚àÄ (As : List Type) ‚Üí toList (toObj As) ‚â° As
toList-toObj [] = refl
toList-toObj (A‚ÇÅ ‚à∑ As) = toList-toObj‚ÇÅ A‚ÇÅ As

toObj-transpose : ‚àÄ (As : List Type) {A} ‚Üí toObj As ‚â° A ‚Üí As ‚â° toList A
toObj-transpose _ As‚â°A = trans (sym (toList-toObj _)) (cong toList As‚â°A)

-- toObj is an inverse of toList only for arguments of the form `toObj As`.
toObj-toList : ‚àÄ (As : List Type) {A} ‚Üí toObj As ‚â° A ‚Üí toObj (toList A) ‚â° A
toObj-toList As As‚â°A = trans (sym (cong toObj (toObj-transpose As As‚â°A))) As‚â°A

prim-injective : ‚àÄ {A‚ÇÅ A‚ÇÇ : Type} ‚Üí prim A‚ÇÅ ‚â° prim A‚ÇÇ ‚Üí A‚ÇÅ ‚â° A‚ÇÇ
prim-injective refl = refl

‚äó-injective
  : ‚àÄ {A‚ÇÅ A‚ÇÇ B‚ÇÅ B‚ÇÇ : Object Type}
  ‚Üí A‚ÇÅ ‚äó B‚ÇÅ ‚â° A‚ÇÇ ‚äó B‚ÇÇ ‚Üí A‚ÇÅ ‚â° A‚ÇÇ √ó B‚ÇÅ ‚â° B‚ÇÇ
‚äó-injective refl = refl , refl

toObj‚ÇÅ-injective
  : ‚àÄ (A‚ÇÅ B‚ÇÅ : Type) (As Bs : List Type)
  ‚Üí toObj‚ÇÅ A‚ÇÅ As ‚â° toObj‚ÇÅ B‚ÇÅ Bs ‚Üí A‚ÇÅ ‚â° B‚ÇÅ √ó As ‚â° Bs
toObj‚ÇÅ-injective A‚ÇÅ B‚ÇÅ [] [] refl = refl , refl
toObj‚ÇÅ-injective A‚ÇÅ B‚ÇÅ (A‚ÇÇ ‚à∑ As) (B‚ÇÇ ‚à∑ Bs) x =
  let (pA‚ÇÅ‚â°pB‚ÇÅ , tA‚ÇÇ‚â°tB‚ÇÇ) = ‚äó-injective x
      (A‚ÇÇ‚â°B‚ÇÇ , As‚â°Bs) = toObj‚ÇÅ-injective _ _ _ _ tA‚ÇÇ‚â°tB‚ÇÇ
  in  prim-injective pA‚ÇÅ‚â°pB‚ÇÅ , cong‚ÇÇ _‚à∑_ A‚ÇÇ‚â°B‚ÇÇ As‚â°Bs

toObj-injective : ‚àÄ (As Bs : List Type) ‚Üí toObj As ‚â° toObj Bs ‚Üí As ‚â° Bs
toObj-injective [] [] x = refl
toObj-injective (A‚ÇÅ ‚à∑ As) (B‚ÇÅ ‚à∑ Bs) x =
  let (y , z) = toObj‚ÇÅ-injective A‚ÇÅ B‚ÇÅ As Bs x
  in  cong‚ÇÇ _‚à∑_ y z
toObj-injective [] (_ ‚à∑ []) ()
toObj-injective [] (_ ‚à∑ _ ‚à∑ _) ()
toObj-injective (_ ‚à∑ []) [] ()
toObj-injective (_ ‚à∑ _ ‚à∑ _) [] ()

data Morphism {Type : Set o} (Mor : List Type ‚Üí List Type ‚Üí Set m) : (A B : Object Type) ‚Üí Set (o ‚äî m)
    where
  prim : ‚àÄ {As Bs} ‚Üí Mor As Bs ‚Üí Morphism Mor (toObj As) (toObj Bs)
  id : ‚àÄ {A} ‚Üí Morphism Mor A A
  _‚àò_ : ‚àÄ {A B C} ‚Üí Morphism Mor B C ‚Üí Morphism Mor A B ‚Üí Morphism Mor A C
  _‚ñ≥_ : ‚àÄ {A B C} ‚Üí Morphism Mor A B ‚Üí Morphism Mor A C ‚Üí Morphism Mor A (B ‚äó C)
  p‚ÇÅ : ‚àÄ {A B} ‚Üí Morphism Mor (A ‚äó B) A
  p‚ÇÇ : ‚àÄ {A B} ‚Üí Morphism Mor (A ‚äó B) B
  Œµ : ‚àÄ {A} ‚Üí Morphism Mor A ùüè
